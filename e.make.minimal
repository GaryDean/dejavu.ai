#!/bin/bash
#@ Script  : $PRG
#@ Version : ${_ent_VERSION}
#@ Desc    : Make optimised minimal version of e.bash source file.
#@         : All comments and blank lines are removed.
#@         : 
#@         : Default output file is [${e_min:-}]
#@         : 
#@         : Core script [$(basename "$e_file")] is always included first,
#@         :   then *all* *.bash files found in [$ENTITIES/e.d/]
#@         :   *except* those occuring within subdirectories dev/ tmp/ or /temp
#@         : 
#@         : Within user scripts, [source $(basename "$e_min")] can be used instead
#@         :   of [source $(basename "$e_file")]
#@         : 
#@         : Note that 'e' in the PATH is a symlink to 
#@         :   [$ENTITIES/e.bash.min]
#@         : 
#@ Synopsis: $PRG [-y|--no-prompt] [--minfile \"filename\"]
#@         :        [--v|-verbose] [-q|--quiet] [-V|--version] 
_ent_0=$(readlink -f "$0")
# set e.bash location to *this* script directory
ENTITIES=$(dirname "$_ent_0") || exit 2
#shellcheck source=e.bash
source "$ENTITIES/e.bash" || exit 2

	strict.set on
	msg.prefix.set 'make.min'

	declare e_file="$ENTITIES/e.bash"
	declare e_min="$ENTITIES/e.bash.min"
	declare e_min_tmp=''

	declare -i noprompt=0

main() {
	while (($#)); do case "$1" in
		-m|--minfile)	shift; e_min="${1:-}";;
		-y|--no-prompt|--noprompt)		
									noprompt=1; msg.color.set off;;
		-v|--verbose)	msg.verbose.set on;;
		-q|--quiet)		msg.verbose.set off;;
		-V|--version)	echo "$PRG $_ent_VERSION"; return 0;;
		-h|--help)		_e_usage; return 0;;
		-[myvqVh]*)		#shellcheck disable=SC2046 # expand aggregated short options
									set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}";;
		*)						msg.err --errno 22 "Bad parameter '$1'"
									_e_usage
									return $?;;
	esac; shift; done
	# set up canonical filenames
	[[ -z $e_min ]] && e_min="$ENTITIES/e.bash.min"
	touch "$e_min" || msg.die "Could not touch [$e_min]"
	e_min=$(readlink -f "$e_min") || msg.die "$(errno $?)"
	e_min_tmp="${e_min}.$$.$RANDOM"

	# sanity check
	[[ "$e_file" == "$e_min" ]] \
			&& msg.die --log "Cannot clobber [${e_file}]!"
	cd "$ENTITIES" \
			|| msg.die --log "Could not cd into [$ENTITIES]"

	if (( ! noprompt )); then
		msg.yn "Do you wish to proceed?" || return 1
		msg 'Proceeding'
	fi

	[[ -z "${ENTITIES:-}" ]] 	&& msg.die "Envvar \$ENTITIES not defined!"
	cd "$ENTITIES" 				|| msg.die "Could not cd into [$ENTITIES]!"

	# set up header for e.bash.min
	echo '#!/bin/bash' > "$e_min_tmp"
	echo 'declare -ix _ent_MINIMAL=1' >> "$e_min_tmp"
	chmod 755 "$e_min_tmp"
	# assemble all .bash files; define e.bash as start point
	local -a templates=( "$ENTITIES/e.bash" )
	# get all .bash files in e.d/
	[[ ! -d "$ENTITIES/e.d" ]] && msg.die --log "[$ENTITIES/e.d] not found!"
	local _e
	local -a _userbash=()
	shopt -s globstar
	# shellcheck disable=SC2231
	for _e in $ENTITIES/e.d/**/*.bash; do
		if [[ -r "$_e" ]]; then
			if [[ ${_e} == *"/dev/"* || ${_e} == *"/tmp/"* || ${_e} == *"/temp/"*	]]; then 
				((_ent_DEBUG)) && msg.warn "[${_e}] not included."
				continue
			fi
			if [[ ! -L "$_e" ]] ; then
				_userbash+=( "${_e}" )
			else
				templates+=( "${_e}" )
			fi
		fi
	done
	# do symlinks last
	for _e in "${_userbash[@]}"; do
		templates+=( "${_e}" )
	done
	unset _e _userbash

	# merge all bash files into one minimal file
	local template 
	local -a tx=()
	for template in "${templates[@]}"; do
		[[ ! -f "${template}" ]] && { msg.err "[${template}] not found!"; continue; }
		# remove comment lines that begin with ^space*#
		# remove blank lines
		# space trim all lines
		# export to minimal version of e.bash
		(	tx=( 
					"$(grep -v '^[[:space:]]*#' "$template" | grep -v '^[[:blank:]]*$')"
				 )
				local IFS=$'\n'
				for ln in "${tx[@]}"; do	trim "$ln";	echo;	done
		) >> "$e_min_tmp"
	done
	unset template templates tx

	## rename e_min_tmp.$$ to e.bash.min
	# backup any old version
	[[ -f "$e_min" ]] \
			&& mv "$e_min" "$e_min.old"
	# rename the temp file as minimal file
	mv "$e_min_tmp" "$e_min" \
			|| msg.die "Could not rename [$e_min_tmp]" "  to [$e_min]."

	# make timestamps the same for *.bash and *.bash.min
	/usr/bin/touch -r "$e_file" "$e_min" \
			|| msg.err "File touch [$e_min] failed!"

	# check permissions
	chmod 755 "$e_min"	\
			|| msg.err "Could not chmod 755 [$e_min]!"

	msg.info "$e_min created."
}

main "$@"
#fin
