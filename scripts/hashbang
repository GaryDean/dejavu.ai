#!/bin/bash
#@ Program : hashbang
#@ Version : $_ent_VERSION
#@ Desc    : Use 'find', and optionally 'grep', to search directory for 
#@         : files identified as programming scripts, ignoring all other 
#@         : files.
#@         :  
#@         : Script identification is by hashbang (default type '$HB') 
#@         : or filename extension.
#@         : 
#@         : ${hb_EXCLUDE@A}
#@         : ${hb_PRUNE@A}
#@:
#@ Synopsis: hashbang [Options] [\"startdir\"] 
#@         : startdir  Directory to start searching (default '.')
#@         : 
#@ Options : -s|--search str    Grep file for str.
#@         : -b|--hashbang type File type to search (def. $HB)
#@         :                    Accepted types are:
#@         :                    bashx (*default, bash+dash+sh), all, bash,
#@         :                    dash, sh, php, python, perl
#@         : -X|--hb-exclude    Exclude using envvar hb_EXCLUDE (default).
#@         : -Y|--no-hb-exclude Do not use hb-exclude.
#@         : -e|--exclude expr  Add expr to hb_EXCLUDE. Enables -X 
#@         : -P|--prune dir     Add dir to hb_PRUNE. Enables -X 
#@         : -f|--padfix str    Spacer for pre/suffix (def. ' '). 
#@         : -p|--prefix pref   Prefix found files with 'prefix'.
#@         : -x|--suffix suff   Suffix found files with 'suffix'.
#@         : -l|--nolf          No line feed at end of filename.
#@         : -v|--verbose       Output additional info as comment line (#).
#@         : --|--grep          Pass remaining parameters to grep.
#@         : 
#@ Examples: #1) Find bash scripts with string containing a matching grep pattern 
#@         : hashbang -s '^whereisit' 
#@         : 
#@         : #2) Find all bash scripts containing the string 'OKROOT', 
#@         : #   append prefix of 'p -s' (p is the e.bash script editor)
#@         : hashbang -s \"OKROOT\" -p \"p -s\" 
#@         : 
#@         : #3) Find all script files (bash,sh,php,perl,etc) in /usr/bin
#@         : hashbang -b all /usr/bin
#@
	declare -- _ent_0 PRG #PRGDIR
	_ent_0=$(readlink -en -- "$0") || _ent_0=''
	PRG=${_ent_0##*/}	#PRGDIR=${_ent_0%/*}
	declare opt='-'; set ${opt}o errexit ${opt}o nounset ${opt}o pipefail
	cleanup() {
		local -i err=$?
		(($#)) && err=$1
		((err>1)) && >&2 echo "Error $err"
		exit "$err"
	}
	trap '{ builtin echo >&2 "^C"; builtin exit; }' SIGINT
	trap 'cleanup $?' EXIT
	
	#shellcheck disable=SC2015
	version.set() { 
		declare -gx _ent_VERSION="${1:-${_ent_VERSION:- 0.0}}"
		[[ -z "${1:-}" ]] && echo "${_ent_VERSION}" || true
	}
	version.set '1.0'
		
	declare DirStart='' FindSymLinks=-P
	declare HB=bashx
	declare -i MaxDepth=420 Verbose=0 hbExclude=1
	declare GrepSearch=''
	declare GrepOptions=( '-m1' '-sq' )
	declare Prefix='' Suffix='' Padfix=' '
	declare LF=$'\n'
	declare -gx hb_EXCLUDE
	[[ -z "${hb_EXCLUDE:-}" ]] \
			&& hb_EXCLUDE='.old .bak help/ cctv/ ~'
	declare -gx hb_PRUNE
	[[ -z ${hb_PRUNE:-} ]] && hb_PRUNE='/gudang /.gudang /dev /help /docs/help /cctv /.git' 
	declare Binaries='\( -not -name "*.png" -not -name "*.jpg" -not -name "*.htm" -not -name "*.TTF" \)'
	declare -i FileCount=0
			
hbmain() {
	(($#)) || set -- . --hashbang all
	while (($#)); do
		if [[ "${1:0:1}" == '-' ]]; then
			case "$1" in
				-b|--hashbang)			shift; HB=${1:-bashx} ;;
				-s|--search)				shift; GrepSearch="${1:-}" ;;
				-m|--maxdepth)		  shift; MaxDepth=${1:- 1} ;;
				-X|--hb-exclude)		hbExclude=1 ;;
				-Y|--no-hb-exclude)	hbExclude=0 ;;
				-e|--exclude)				shift; hb_EXCLUDE+=" ${1:-jUnK}"; hbExclude=1 ;;
				-P|--prune)					shift; hb_PRUNE+=" ${1:-jUnK}"; hbExclude=1 ;;
				-L|--symlinks)			FindSymLinks='-L' ;;
				-p|--prefix)				shift; Prefix="${1:-}${Padfix}" ;;
				-x|--suffix)				shift; Suffix="${Padfix}${1:-}" ;;
				-f|--padfix)				shift; Padfix="${1:-}" ;;
				-l|--nolf)					LF='' ;;
				-v|--verbose)				Verbose=1 ;;
				-q|--quiet)					Verbose=0 ;;
				-V|--version)				echo "$PRG vs $(version.set)"; return 0 ;;
				-h|--help)					_e_usage "$0" "$PRG"; return 0	;;
				--|--grep)					shift
														unset 'GrepOptions[1]'
														GrepOptions+=("$@")
														break ;;
				-[bsmXYePpxflvqVh]*) #shellcheck disable=SC2046 # expand aggregated short options
														set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}" ;;
				*)									>&2 echo "$PRG: Invalid parameter '$1'"; exit 22 ;;
			esac
		else
			if (( ${#DirStart} )); then
				GrepOptions+=( "$1" )
			else
				DirStart="$1"
			fi				
		fi
		shift	
	done

	_hashbang #"$@"
	return
}

_hashbang() {	
	local PruneEx='.foobar' GrepEx='.foobar'
	((${#DirStart})) || DirStart=.	

	if ((hbExclude)); then
		PruneEx="${hb_PRUNE//[,;]/ }"	# convert all ,; chars to spaces
		PruneEx="${PruneEx#+([[:blank:]])}"; PruneEx="${PruneEx%+([[:blank:]])}" # trim blanks from front and back
		PruneEx="${PruneEx//+([[:blank:]])/ }" # remove all double occurances of blanks
	fi
	[[ -z $PruneEx ]] && PruneEx='.foobar'
	
	local -a xDirs
	mapfile -t xDirs < <(
			find -O2 $FindSymLinks "$DirStart" -maxdepth "$MaxDepth" -type d 2>/dev/null | grep -v "${PruneEx// /\\|}"
		)

	((hbExclude)) && GrepEx="${hb_EXCLUDE} .foobar"

	if ((Verbose)); then
		cat <<-eot
			# $PRG vs $(version.set)
			# Search for file types '$HB'
			#
			# find -O2 ${xDirs[@]:0:20} -maxdepth 1 -type f 
			#
			# grep $FindSymLinks ${GrepOptions[*]} ${GrepSearch@A}
			# ${hb_PRUNE@A}
			# ${GrepEx@A}
			#
		eot
	fi
	declare -a Files
	#shellcheck disable=SC2086
	mapfile -t Files <<<"$(eval find -O2 $FindSymLinks "${xDirs[@]}" -maxdepth 1 $Binaries -type f 2>/dev/null)"
	for File in "${Files[@]}"; do 
		#shellcheck disable=SC2086
		if in_array.loose "${File##*/}" $GrepEx; then
			((Verbose)) && >&2 echo "*** Excluding '${File##*/}'"
			continue
		fi
		hb=$(head -n1 "$File" 2>/dev/null | tr '\0' 'X')
		[[ ${hb:0:2} == '#!' || ${hb:0:2} == '<?' ]] || continue
		ext=${File##*.}
		case $HB in
			bashx)	[[ $hb =~ ^\#\!.*/bin/bash.* || $hb =~ ^\#\!.*/bin/sh.* || $hb =~ ^\#\!.*/bin/dash.* || $hb =~ ^\#\!.*/bin/env.*bash.* || '|bash|sh|dash|' == *"|$ext|"* ]] || continue ;;
			all)		;;
			bash)		[[ $hb =~ ^\#\!.*/bin/bash.* || $hb =~ ^\#\!.*/bin/env.*bash.* || $ext == 'bash' ]] || continue ;;
			dash)		[[ $hb =~ ^\#\!.*/bin/dash.* || $hb =~ ^\#\!.*/bin/env.*dash.* || $ext == 'dash' ]] || continue ;;
			sh)			[[ $hb =~ ^\#\!.*/bin/sh.* 	|| $ext == 'sh' ]] || continue ;;
			zsh)    [[ $hb =~ ^\#\!.*/bin/zsh.* 	|| $ext == 'zsh' ]] || continue ;;
			php)		[[ ${hb:0:2} == '<?' 				|| $hb =~ ^\#\!.*/bin/php.* || $ext == 'php' ]] || continue ;;
			python)	[[ $hb =~ ^\#\!.*/bin/pyth.* || $ext == 'py' || $hb =~ ^\#\!.*/bin/env.*python.* ]] || continue ;;
			perl)		[[ $hb =~ ^\#\!.*/bin/perl.* || $ext == 'perl' ]] || continue ;;
			*)			>&2 echo "Invalid hashbang type '$HB'"; return 22;;
		esac
		if [[ -n $GrepSearch ]]; then
			#shellcheck disable=SC2068
			grep ${GrepOptions[@]} "$GrepSearch" "$File" || continue
		fi
		echo -n "${Prefix}$File${Suffix}${LF}"
		FileCount+=1
	done

	[[ -n ${LF} ]] || echo
	((Verbose)) && {
		echo "# ${FileCount} file$( ((FileCount != 1)) && echo 's') found"
	}
	return 0
}

in_array() { 
	[[ -z ${2:-} ]] && return 1
	local pattern match="$1"
	shift
	for pattern; do [[ $pattern == "$match" ]] && return 0; done
	return 1
}

in_array.loose() { 
	[[ -z ${2:-} ]] && return 1
	local match="$1" pattern
	local -i lenmatch=${#match} lenpattern=0
	shift
	for pattern; do 
		lenpattern=${#pattern}
		((lenmatch < lenpattern)) && continue
		[[ $match == *"$pattern"* ]] && return 0
	done
	return 1
}

hbmain "$@"
#fin
