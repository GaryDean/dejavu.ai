#!/bin/bash
#! shellcheck disable=SC2249
#@ Program : whichx
#@ Version : $_ent_VERSION
#@ Desc    : Locate a command.
#@         : An updated bashist version of the 'which' program.
#@         : Functionally fully compatible with 'which', but much more 
#@         : robust than 'which'.
#@         :
#@         : whichx returns the pathnames of the files (or links) that would 
#@         : be executed in the current environment, had its arguments been 
#@         : given as commands in a strictly POSIX-conformant shell. It does 
#@         : this by searching the PATH for executable files matching the 
#@         : names of the arguments. It does not canonicalize path names (for
#@         : this, see readlinkx).
#@         :
#@         : If any 'filename' is not found, returns error.
#@         :
#@ Synopsis: whichx [Options] filename ...
#@ Options : -a|--all      Print all matching pathnames of each argument
#@         : -V|--version  Print version.
#@         : -h|--help     This help.
#@         :
#@ Examples: whichx ls
#@         :
#@ Depends : bash readlink
#@ See Also: which readlinkx

source e.bash.min 2>/dev/null || {
	declare _ent_0; _ent_0=$(readlink -e "$0")
	declare PRG=${_ent_0##*/}	
	declare _ent_VERSION
}
#shellcheck disable=1091,2015,2155
_e_whichx() {
	_ent_VERSION='1.0'
	set -o noglob; #set -o errexit
	
	local -i ALLRET=0 ALLMATCHES=0 RET
	local -a args=()
	while (($#)); do case $1 in
		-a|--all)			ALLMATCHES=1 ;;
		-h|--help)		_e_usage "$_ent_0" whichx; return 0 ;;
		-V|--version)	echo "$PRG vs $_ent_VERSION"; return 0 ;;
		-*)						>&2 echo "$PRG: Invalid option '$1'"; return 22 ;;
		*)						args+=( "$1" ) ;;
	esac; shift; done
	(($#)) || ALLRET=1
	
	case $PATH in
		(*[!:]:) PATH="$PATH:" ;;
	esac
	local PROGRAM ELEMENT IFS_SAVE="$IFS"
	for PROGRAM in "${args[@]}"; do
		RET=1
		IFS=':'
		case $PROGRAM in
			*/*)	if [[ -f "$PROGRAM" ]] && [[ -x "$PROGRAM" ]]; then
							echo "$PROGRAM"
							RET=0
						fi ;;
			*)		for ELEMENT in $PATH; do
							[[ -z "$ELEMENT" ]] && ELEMENT=.
							if [[ -f "$ELEMENT/$PROGRAM" ]] && [[ -x "$ELEMENT/$PROGRAM" ]]; then
								echo "$ELEMENT/$PROGRAM"
								RET=0
								((ALLMATCHES)) || break
							fi
						done ;;
		esac
		IFS="$IFS_SAVE"
		((RET)) && ALLRET=1
	done
	return "$ALLRET"
}
declare -fx '_e_whichx'

declare -fx '_e_usage'
_e_usage() {
	set +e
	local input=${1:-${_ent_0:-$0}}
	local -i inputfound=0
	if [[ -f "$input" ]]; then
		grep -m1 -qs '^#[X@]' "$input" && inputfound=1
	fi
	((inputfound)) || { rtfm "${2:-}"; return 0; }
	less -FXRS < <(
		while read -r; do
			printf '%-9s:%s\n' "${REPLY%%:*}" "$(eval "echo \"${REPLY#*:}\"")"
		done < <(grep '^#[X@][[:blank:][:alnum:]._-]*:' "$input" \
								|sed 's/^#[X@][[:blank:]]*//; s/\t/  /g;')
	)
	return 0
}
declare -fx '_e_usage'

#shellcheck disable=2091
_e_whichx "$@"
#fin
