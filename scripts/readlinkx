#!/bin/bash
#!shellcheck disable=SC0000
#@ Script  : readlinkx
#@ Version : $(version.set)
#@ Desc    : Return fully qualified, canonical name of *executable* file 
#@         : in current PATH.
#@         : 
#@ Synopsis: readlinkx filename...
#@         : Where 'filename' is the basename of executable file to search 
#@         : for in the current PATH.
#@         : 
#@ Options : -v|--verbose  Output error messages.
#@         : -q|--quiet    Suppress error messages.
#@         : 
#@ Examples: readlinkx dff
#@         : 
#@         : readlinkx nano joe vi
#@         : 
#@ Depends : e.bash readlink
#@ See Also: whichx
set -e
#shellcheck disable=SC1091
source e.bash.min 2>/dev/null || {
	# do this if e.bash is not found/installed.
	declare _ent_0
	_ent_0=$(readlink -e "$0")
	declare PRG=${_ent_0##*/}	
	declare -i _ent_VERBOSE=1
	version.set() { 
		declare -gx _ent_VERSION="${1:-${_ent_VERSION:- 0.0}}"
		#shellcheck disable=SC2015
		[[ -z "${1:-}" ]] && echo "${_ent_VERSION}" || true
	}
	msg.err() { ((_ent_VERBOSE)) && >&2 echo "$PRG: $*"; }
	msg.die() { 
		local -i errno
		[[ ${1:-} == '--errno' ]] && { errno="${2:-0}"; shift 2; }
		msg.err "$@"
		exit "$errno"
	}
	_e_usage() {	less -FXSR < <(
			while read -u 3 -r; do
				>&3 printf '%-9s:%s\n' "${REPLY%%:*}" "$(eval "echo \"${REPLY#*:}\"")"
			done < <(grep '^#[X@][[:blank:][:alnum:]._-]*:' "${_ent_0:-$0}" \
									|sed 's/^#[X@][[:blank:]]*//; s/\t/  /g') 
									); }
	true
}

version.set "1.0"

# main
	declare -a args=()
	while (($#)); do case "$1" in
		-v|--verbose)	_ent_VERBOSE=1 ;;
		-q|--quiet)		_ent_VERBOSE=0 ;;
		-V|--version)	echo "$PRG vs $(version.set)"; exit 0 ;;
		-h|--help)		_e_usage; exit 0 ;;
		-[qvVh]*)			#shellcheck disable=SC2046 # de-aggregate aggregated short options
									set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}";;
		-?|--*)				msg.die --errno 22 "Invalid option '$1'" ;;
		*)						args+=("$1") 
	esac; shift; done
	((${#args[@]})) || msg.die --errno 2 'No parameter specified.'

	declare -- file
	for file in "${args[@]}"; do 
		readlink -se "$(command -v "$file")" \
				|| { ((_ent_VERBOSE)) \
								&& msg.err "Executable '$file' not found"; }
	done
#fin
