#!/bin/bash
#@Script: $PRG 
#@Version: $(version.set)
#@Desc: 
#@: Create zip archive of a directory, and store in directory 
#@: called [.]{DirNameBase}.old.  
#@:
#@: Multiple snap-shots of directores can be maintained, with 
#@: option to prune oldest files.    
#@:
#@: The zip archive name uses the format {archiveName}.{time}.old
#@:
#@: Symlinks are preserved as symlinks.
#@: 
#@Synopsis: 
#@: $PRG [Options] dirname [archivedir]
#@:
#@: Where 'dirname' is the directory to archive, and 'achivedir'
#@: is the directory where the compressed archive file will be 
#@: located.
#@: 
#@Options: 
#@: -l|--list     List all files in the associated 'dirname.old' 
#@:               archive directory.
#@: -P|--prune limit  
#@:               Specify max number of archive files allowed, in
#@:               archive directory, and delete oldest if 
#@:               necessary.      
#@: -v|--verbose  Verbose on. (default)
#@: -q|--quiet    Verbose off.
#@: 
#@Examples: 
#@: #0) Create archive directory /usr/share/.myscripts.old (if it 
#@: #   doesn't already exist) then make zip archive file called 
#@: #   'myscripts.zip'.
#@: $PRG /usr/share/myscripts -H -l 15 
#@: 
#@: #1) Just make an archive of a directory
#@: #   Zip file will be located in directory 'myscripts.old'.
#@: $PRG myscripts
#@: 
#@: #2) Make an archive Scripts in '/var/spool/Scripts.archive'.
#@: #   Zip file will be located in directory 'myscripts.old'.
#@: $PRG Scripts /var/spool/Scripts.archive
#@: 
set -e
# global vars
declare -- ArchiveDir='' OldArchiveDir=''
declare -i PruneLimit=0
declare -a ZipOpts=('-v')

. e || exit
on.exit.set on
strict.set on

main() {
	# shellcheck disable=SC2154
	version.set "${_ent_VERSION}"
	msg.prefix.set "$PRG"
	verbose.set on
		
	local -i listonly=0
	local -a args=()
	while (($#)); do case "$1" in
		-e|--exclude)		shift; ZipOpts+=( --exclude "$1" ) ;;
		-P|--prune)			shift; PruneLimit=${1:-0} ;;
		-l|--list)			listonly=1 ;;
		-v|--verbose)		msg.verbose.set on; ZipOpts+=('-v') ;;
		-q|--quiet)			msg.verbose.set off; ZipOpts+=('-q') ;;
		-V|--version)		echo "$PRG vs $(version.set)"; return 0 ;;
		-h|--help)			_e_usage; return 0 ;;
		-[PlvqVh]*)			#shellcheck disable=SC2046 # expand aggregated short options
										set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}" ;;
		-*)							msg.die -e 22 "Invalid option '$1'" ;;
		*)							if   [[ -z $ArchiveDir    ]]; then ArchiveDir="$1" 
										elif [[ -z $OldArchiveDir ]]; then OldArchiveDir="$1" 
										else msg.die -e 22 "Invalid argument '$1'"
										fi ;;
	esac; shift; done
	while [[ ${ArchiveDir: -1} == '/' ]]; do ArchiveDir=${ArchiveDir:0: -1}; done
	[[ -z $ArchiveDir ]] && { >&2 _e_usage; msg.die -e 22 "Directory to archive must be specified."; }
	# test existance
	[[ -d $ArchiveDir ]] || msg.die -e "$?" "Directory '$ArchiveDir' does not exist."	
	ArchiveDir=$(readlink -e "$ArchiveDir")
	ArchiveBase=$(basename "$ArchiveDir")

	while [[ ${OldArchiveDir: -1} == '/' ]]; do OldArchiveDir=${OldArchiveDir:0: -1}; done
	if [[ -z $OldArchiveDir ]]; then
		OldArchiveDir="$(dirname "$ArchiveDir")/${ArchiveBase}.old"	
	fi

	# list only
	if ((listonly)); then
		msg "Archive $OldArchiveDir:"
		if [[ -d $OldArchiveDir ]]; then
			ls -lA "$OldArchiveDir/"
		else
			msg.err "Archive directory '$OldArchiveDir' not found."
		fi
		return 0
	fi	

	# create the archive directory
	mkdir -p "$OldArchiveDir" || msg.die "Could not create '$OldArchiveDir'"
	chmod 755 "$OldArchiveDir"

	# make the zip file
	zipfile="${OldArchiveDir}/${ArchiveBase}.$(date +%s).zip"
	msg "Creating Archive '$zipfile'" "with zip options ${ZipOpts[*]}"
	zip --symlinks "${ZipOpts[@]}" -r "$zipfile" "${ArchiveDir}/" >/dev/null || msg.die "Error in zip '$zipfile'"
	chmod 644 "$zipfile"

	# shellcheck disable=SC2012
	msg.info "'$zipfile' was created [$( int2hr "$(stat --printf=%s "$zipfile")" iec)]."

	if ((PruneLimit)); then
		mapfile -t args < <(find "$OldArchiveDir" -name "${ArchiveBase}*.zip" | sort -r)
		for file in "${args[@]:${PruneLimit}}"; do
			msg.info "Removing old archive '$file'"
			rm "${file:?}"
		done
	fi
	msg "Archive for '$ArchiveBase' complete."
}

usage() {
	less -FX < <(
		while read -r; do
			printf '%9s:%s\n' "${REPLY%%:*}" "$(eval "echo \"${REPLY#*:}\"")"
		done < <(grep '^#[X@][[:blank:][:alnum:]._-]*:'  "${_ent_0:-$0}" \
								|sed 's/^#[X@][[:blank:]]*//; s/\t/  /g;')
	)
}

main "$@"
#fin
