#!/bin/bash
#!shellcheck disable=1090,1091,2154
#@Script  : e.help
#@Version : ${_ent_VERSION:-}
#@Desc    : E.bash Helpfiles and Source Editting.
#@:
#@Synopsis: $PRG [Options] [cat [item [exit]]]
#@:
#@: Where:
#@:   cat    Either of script|function|global|file|about
#@:   item   Help item to open.
#@:   exit   Command to exit $PRG when finished displaying
#@:          category:item. Otherwise, continues in interactive mode.
#@:
#@Options : 
#@: -s|--search keyword
#@:            Search all help files for 'keyword'.
#@: -t|--tree  
#@:            Show web tree of all helpfiles.
#@: -e|--editor editorprog
#@:            Set editor program to use to edit source files.
#@: 
#@Examples: 
#@: #0) Show all functions:  
#@: $PRG function
#@:
#@: #1) Show helpfiles tree:
#@: $PRG -t
#@:
#@: #2) Set editor to 'p' with shellcheck, and open $PRG 
#@: #   in functions:
#@: $PRG -p 'p -s' function
#@:
source "$(dirname "$0")/e.bash" || { echo >&2 "Could not open [$(dirname "$0")/e.bash]."; exit 1; }
	on.exit xcleanup
	strict.set on
	version.set "${_ent_VERSION}"
	msg.usetag.set off
#	msg.prefix.set "$PRG"
		
	declare EDir
	EDir="${PRGDIR:-}"
	[[ -z $EDir ]] && msg.die "No dir [$EDir]"
	# sanity check
#	[[ "$(basename "$EDir")" == 'e' ]] || msg.die "Sanity check fail."
	
	declare HelpFilesDir="${EDir}/docs/help"
	cd "$HelpFilesDir" || exit

#shellcheck disable=SC2153
main() {
	local Path='' Item='' srcfile Editor="$EDITOR"
	local -u Category=''
	#local -l Action=''
	while (($#)); do case "$1" in
		-C|--category)	shift; (($#)) && Category="$1";;
		-I|--item)			shift; (($#)) && Item="$1";;
		-A|--action)		shift; (($#)) && Action="${1,,}";;
		-s|--search)		shift; Search="$1"
										local -a files
										mapfile -t files < <(grep -rsli "$Search" .)
										((${#files[@]})) || msg.die -e 22 "Search [$Search] not found." 
										xselect --var srcfile -p "$PRG: Select file to view: " "${files[@]}" 'exit'
										[[ $srcfile == '!q' || $srcfile == 'exit' ]] && break
										Category=$(dirname "$srcfile")
										Item=$(basename "$srcfile")
										;;
		-t|--tree)			display_tree; return 0;;
		-e|--editor)		shift; (($#)) && Editor="$1";;
		-v|--verbose)		msg.verbose.set on;;
		-q|--quiet)			msg.verbose.set off;;
		-V|--version)		echo "e.bash vs $(version.set)"; return 0;;
		-h|--help)			_e_usage; return 0;;
		-[CIAstevqVh]*)	#shellcheck disable=SC2046 # expand aggregated short options
										set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}";;
		-?|--*)					msg.err "Invalid option '$1'"; return 22;;
		*)							if   [[ -z $Category ]]; then 
											Category="$1"
										elif [[ -z $Item ]]; then 
											Item="$1"
										elif [[ -z $Action ]]; then 
											Action="$1"
										else 
											msg.err "Too many arguments '$1'"; return 22
										fi;;
	esac;	shift; done

	if [[ -n $Category ]]; then
		if [[ ! -d $Category ]]; then
			msg.err "Category [$Category] not found."
			Category='' Item=''
			[[ $Action == 'exit' ]] && exit 0
		fi
		if [[ -n $Item ]]; then
			if [[ ! -f $Category/$Item ]]; then
				msg.err "Item [$Category/$Item] not found."
				Item=''
				[[ $Action == 'exit' ]] && exit 0
			fi
		fi
		if [[ -n $Category ]]; then
			if [[ -n $Item ]]; then 
				Path="$Category/$Item"
			elif [[ -n $Category ]]; then
				Path="$Category"
			fi
		fi
	fi
	
	while((1)); do 
		[[ -z $Path ]] && xselect --var Path -p "$PRG: Select Category: " ./* 'exit' 
		[[ $Path == '!q' || $Path == 'exit' ]] && break
		if [[ $Path == '!0' ]]; then
			[[ $PWD == "$HelpFilesDir" ]] && break
			cd .. || break
		elif [[ -d "$Path" ]]; then
			cd "$Path" || break
		else
			[[ ! -f $Path ]] && break
			while((1)); do
				more "$Path"
				srcfile=$(grep -i '[[:blank:]]*URL: ' "$Path")
				srcfile=${srcfile#*:[[:blank:]]*}
				srcfile="${srcfile/file\:\/\//}"
				if [[ -z $Action ]]; then
					xselect -v Action -p "$PRG: Select action: " "edit $(basename "$srcfile")" 'exit'
				fi
				[[ $Action == '!q' || $Action == 'exit' ]] && break 2
				[[ $Action == '!0' ]] && break
				$Editor "$srcfile"
				Action=''
			done
		fi
		Action=''
		Path=''
	done
	return 0
}

# signal EXIT set to xcleanup
xcleanup() {
	local -i err=$?
	(( ${1:-0} )) && err="$1"
	((err > 1 && err !=130)) && errno "$err"
	((err)) && >&2 echo ''
#	exit "$err"
}

display_tree() {
	local tmp
	local htmfile='index.html' tmpfile="/tmp/$PRG-$$-$RANDOM"
	local browser
	browser="$(command -v lynx || command -v w3m)"
	
	#if [[ ! -f "$HelpFilesDir/$htmfile" ]]; then
		msg.info "Creating [$htmfile]"
		cd "$HelpFilesDir" || msg.die "Could not cd into [$HelpFilesDir]"
		(	/usr/bin/tree --dirsfirst --noreport -H ./ -T 'e.bash help files' "$(pwd)"
			# clean up html output
			tmp=$(cat "$htmfile")
			tmp="${tmp//<!--/}" 
			tmp="${tmp//-->${LF}/}" 
			tmp="${tmp//<p class=\"VER*\/p>/}" 
			tmp="${tmp//<\/style>/H1,h1 \{text-align:left;color:green;\}${LF}<\/style>}"
			# blast it back to the html file
			echo "$tmp"
		) >"$tmpfile"
		mv "$tmpfile" "$htmfile"
		chmod 666 "$htmfile"
	#fi
	unset tmp htmfile tmpfile
	
	## open up helpfiles	
	$browser "$HelpFilesDir/index.html" 

	return 0 
}

_e_usage() {
	strict.set off
	set +e
	local input=${1:-${_ent_0:-${0:-}}}
	local -i inputfound=0
	if [[ -f "$input" ]]; then
		grep -m1 -qs '^#[X@][[:blank:][:alnum:]._-]*:' "$input" && inputfound=1
	fi
	((inputfound)) || { rtfm "${2:-}"; return 0; }
	less -FXRS < <(
		while read -r; do
#			if [[ ${REPLY,,} == *"insert"* ]]; then
#				( local cmd l; local -a lines
#					cmd=${REPLY##*:}; cmd=$(trim "$cmd")
#					mapfile -t lines < <($cmd || true) || true
#					for l in "${lines[@]}"; do printf '%-9s:%s\n' '' " $l"; done
#				) || true
#				continue
#			fi
			printf '%-9s:%s\n' \
							"$(eval "echo \"${REPLY%%:*}\"")" \
							"$(eval "echo \"${REPLY#*:}\"")"
		
		done < <(grep '^#[X@][[:blank:][:alnum:]._-]*:' "$input" \
								|sed 's/^#[X@][[:blank:]]*//; s/\t/  /g;')
	)
	return 0
}
declare -fx '_e_usage'

main "$@"
#fin
